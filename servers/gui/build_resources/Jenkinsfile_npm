#!groovy

node {
    /*setup constants*/

    registry_name = "datamolahub"
    registry_url = "https://${registry_name}/v1/" // Private Registry
    registry_creds_id = "amc_docker_build" // name of the Jenkins Credentials ID

    build_path = "/usr/local/npm_user"

    deploy_cloud_ip = "75.126.211.182"
    deploy_cloud_user = "amcdashboard"
    deploy_cloud_creds_id = "amc_stage_cloud"
    deploy_repo_name = "20_docker_deploy"

    currentBuild.result = 'SUCCESS'
    notifyBuild('STARTED')
    try {
        //
        stage('Cleanup-Docker VMs') {
            print "Cleanup Docker Elements"
            sh script: 'docker ps -a -f status=exited -q | xargs -r docker rm -v', returnStatus: true
            sh script: 'docker volume ls -q | xargs -r docker volume rm', returnStatus: true
        }
        // Build
        stage('Checkout') {
            checkout scm

            /*Set Variables*/
            env.BUILD_aEMail = gitEmail()
            //env.BUILD_aBranch = gitBranch()
            env.BUILD_aBranch = gitBranchShallow()
            if (env.BUILD_aBranch.toUpperCase().contains('MASTER')) {
                env.BUILD_aVersionName = 'release.'
            } else {
                env.BUILD_aVersionName = env.BUILD_aBranch + '.'
            }
            env.BUILD_aVersion = gitBuildVersion()
            env.BUILD_aNum = "${env.BUILD_aVersionName}${BUILD_aVersion}"
            env.BUILD_aCommitRAW = gitCommit()
            env.BUILD_aRepoType = gitRepoType()
            env.BUILD_aCommit = env.BUILD_aCommitRAW.substring(0, 5)

            /*Show Folder Content*/
            sh 'ls -la'
        }
        //
        stage('Build Docker') {
            print "ApplicationName: ${DEFAULT_APPLICATION} \n" +
                    "RepoName: ${env.BUILD_aRepoName} \n" +
                    "RepoPath: ${env.BUILD_aRepoPath} \n" +
                    "RepoType: ${env.BUILD_aRepoType} \n" +
                    "Branch Name: ${env.BUILD_aBranch} \n" +
                    "Commit Build: ${env.BUILD_aNum} \n" +
                    "Commit_ID: ${env.BUILD_aCommit} \n" +
                    "Commit E-Mail: ${env.BUILD_aEMail}"

            withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: "${registry_creds_id}",
                     usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD'
                    ]
            ]) {
                def container_name = "${env.BUILD_aRepoName}.${env.BUILD_aNum}"
                /* Remove old container */
                sh script: "docker rm -f ${container_name}", returnStatus: true

                sh "docker login -u '${env.DOCKER_HUB_USERNAME}' -p '${env.DOCKER_HUB_PASSWORD}'"
                sh "docker pull datamolahub/base-npm-builds:v.8.1"
                sh "docker run -d -t --name ${container_name} datamolahub/base-npm-builds:v.8.1"
                sh "docker cp package.json ${container_name}:${build_path}/package.json"
                sh "docker exec -t --env NPM_VERSION=v.5.6.0 --env NPM_APPLICATION=${DEFAULT_APPLICATION} --env BUILD_TYPE=${DEFAULT_TYPE} --env NPM_BRANCH=${env.BUILD_aBranch} ${container_name} bash -c ./exec_npm_build.sh "

                sh script: "docker rm -f ${container_name}", returnStatus: true
            }


            // Get Detailed Desctiption
            env.BUILD_DetailedDesctiption = GetApplicationDetails()
            // Get "Build Mailing List"
            env.extMailingList_Developers = GetMailingList('maillist_developers.md')
            env.extMailingList_Managers = GetMailingList('maillist_managers.md')

            currentBuild.result = 'SUCCESS'
            notifyBuild('PUBLISHED')
        }
        // AutoBuild Clean-Up Process
        stage('Cleanup') {
            print "Clean Up"
            sh script: 'docker ps -a -f status=exited -q | xargs -r docker rm -v', returnStatus: true
            sh script: 'docker volume ls -q | xargs -r docker volume rm', returnStatus: true
        }
    } catch (err) {
        currentBuild.result = "FAILURE"
        notifyBuild(currentBuild.result)
        throw err
    } finally {
        // Success or failure, always send notifications
        // notifyBuild(currentBuild.result)
    }
}

//************************************************//
import java.text.SimpleDateFormat


def gitCommit() {
    sh "git rev-parse HEAD > GIT_COMMIT-${env.BUILD_NUMBER}"
    def gitCommit = readFile("GIT_COMMIT-${env.BUILD_NUMBER}").trim()
    sh "rm -f GIT_COMMIT-${env.BUILD_NUMBER}"
    return gitCommit
}

def gitBranchShallow() {
    def gitBranch = "${DEFAULT_BRANCH}"
    print gitBranch
    return gitBranch
}

def gitBranch() {
    sh "git rev-parse --abbrev-ref HEAD  > GIT_BRANCH-${env.BUILD_NUMBER}"
    def gitBranch = readFile("GIT_BRANCH-${env.BUILD_NUMBER}").trim()
    sh "rm -f GIT_BRANCH-${env.BUILD_NUMBER}"
    return gitBranch
}

def gitEmail() {
    sh "git --no-pager show -s --format='%ae' ${gitCommit()} > GIT_EMAIL-${env.BUILD_NUMBER}"
    def gitEmail = readFile("GIT_EMAIL-${env.BUILD_NUMBER}").trim()
    sh "rm -f GIT_EMAIL-${env.BUILD_NUMBER}"
    return gitEmail
}

def gitBuildVersion() {
    // Get Latest tag
    sh "git rev-list --tags --max-count=1 | xargs -r git describe --tags > GIT_VERSION-${env.BUILD_NUMBER}"
    def gitVersion = readFile("GIT_VERSION-${env.BUILD_NUMBER}").trim()
    sh "rm -f GIT_VERSION-${env.BUILD_NUMBER}"
    return gitVersion
}

def gitRepoType() {
    def cmd_p11 = / git remote - v | head - n1 | awk '{print $2} '/
    def cmd_p1 = / git config --get remote.origin.url /
    def cmd_p2 = " > GIT_REPO_PATH-${env.BUILD_NUMBER}"
    sh "${cmd_p1} ${cmd_p2}"

    cmd_p1 = "cat GIT_REPO_PATH-${env.BUILD_NUMBER}"
    cmd_p11 = $/ | sed 's/.*\///' | sed 's/\.git//' /$
    cmd_p2 = " > GIT_REPO_NAME-${env.BUILD_NUMBER}"
    sh "${cmd_p1}${cmd_p11}${cmd_p2}"

    env.BUILD_aRepoName = readFile("GIT_REPO_NAME-${env.BUILD_NUMBER}").trim()
    env.BUILD_aRepoPath = readFile("GIT_REPO_PATH-${env.BUILD_NUMBER}").trim()
    print "RepoName: ${env.BUILD_aRepoName}"
    def gitRepoType = 'N.D.'
    if (env.BUILD_aRepoName.toUpperCase().contains('_API_')) {
        gitRepoType = 'API'
    } else if (env.BUILD_aRepoName.toUpperCase().contains('_GUI_')) {
        gitRepoType = 'GUI'
    }
    sh "rm -f GIT_REPO_NAME-${env.BUILD_NUMBER}"
    sh "rm -f GIT_REPO_PATH-${env.BUILD_NUMBER}"
    return gitRepoType
}

def ContaineripAddress(container_name) {
    sh "docker inspect ${container_name} | jq -r '.[0].NetworkSettings.IPAddress' > IP_ADDRESS-${env.BUILD_NUMBER}"
    def ipAddress = readFile("IP_ADDRESS-${env.BUILD_NUMBER}").trim()
    sh "rm -f IP_ADDRESS-${env.BUILD_NUMBER}"
    return ipAddress
}

def PrintEnvVariables() {
    sh "env > ENV-${env.BUILD_NUMBER}"
    def PrintEnvVariables = readFile("ENV-${env.BUILD_NUMBER}");
    sh "rm -f ENV-${env.BUILD_NUMBER}"
    print PrintEnvVariables
}


def GetApplicationDetails() {
    // print "Build Detailed Description"
    def app_description = ""
    sshagent(["${deploy_cloud_creds_id}"]) {

        cmd= "cat ~/${deploy_repo_name}/${DEFAULT_APPLICATION}/${env.BUILD_aBranch}/README.md"
        cmd2 = / ssh -o StrictHostKeyChecking=no ${deploy_cloud_user}@${deploy_cloud_ip} "${cmd}" > APPLICATION_DETAILS-${env.BUILD_NUMBER} /
        sh script: cmd2, returnStatus: true
        if (fileExists("APPLICATION_DETAILS-${env.BUILD_NUMBER}")) {
            app_description = readFile("APPLICATION_DETAILS-${env.BUILD_NUMBER}").trim()
        } else {
            app_description = ""
        }
    }
    sh "rm -f APPLICATION_DETAILS-${env.BUILD_NUMBER}"
    return app_description
}

def GetMailingList(String listName = 'maillist') {
    def mailFile = ""
    sshagent(["${deploy_cloud_creds_id}"]) {
        //
        def cmd= "cat ~/${deploy_repo_name}/${listName}"
        def cmd2 = / ssh -o StrictHostKeyChecking=no ${deploy_cloud_user}@${deploy_cloud_ip} "${cmd}" > MAILING_LIST-${env.BUILD_NUMBER} /
        sh script: cmd2, returnStatus: true
        if (fileExists("MAILING_LIST-${env.BUILD_NUMBER}")) {
            mailFile = readFile("MAILING_LIST-${env.BUILD_NUMBER}").trim().replaceAll( '\n', ',' )
        } else {
            mailFile = ""
        }
    }
    sh "rm -f MAILING_LIST-${env.BUILD_NUMBER}"
    return mailFile
}

def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    def MailList_Developers = "${env.extMailingList_Developers}"
    def MailList_Managers = "${env.extMailingList_Managers}"

    // Override default values of Mail List distribution group
    def mailList = "kbucha@datamola.com"
    env.BUILD_aBranch = env.BUILD_aBranch ?: "${DEFAULT_BRANCH}"
    if ((buildStatus == 'PUBLISHED') && (env.BUILD_aBranch.toUpperCase().contains('MASTER'))) {
        mailList = "${mailList},${MailList_Managers},${MailList_Developers}"
    } else {
        mailList = "${mailList},${MailList_Developers}"
    }

    def dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm")
    def date = new Date()
    def build_date = dateFormat.format(date)

    def artifact_commit = "N.A."
    def artifact_build = "${registry_name}/${env.BUILD_aRepoName}:${env.BUILD_aNum}"
    def artifact_latest = "${registry_name}/${env.BUILD_aRepoName}:${env.BUILD_aBranch}"
    if (env.BUILD_aBranch.toUpperCase().contains('MASTER')) {
        artifact_commit = "${registry_name}/${env.BUILD_aRepoName}:${env.BUILD_aNum}.${env.BUILD_aCommit}"
    }

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "[AMC][BUILD][${DEFAULT_APPLICATION}] ${buildStatus}: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]"

    def msg_main_description  =  env.BUILD_DetailedDesctiption ?: "<p>Project: ${DEFAULT_APPLICATION} </p><p>Branch Name: ${env.BUILD_aBranch} </p>"
    def msg_slack_description = msg_main_description.replaceAll( '</p>', '\n' ).replaceAll("<(.|\n)*?>", '')

    def summary = "${subject} \n (${env.BUILD_URL})"
    if (buildStatus == 'PUBLISHED') {
        summary = "${summary} \n ${msg_slack_description}"
    }

    def details = """<p><b> ${buildStatus}: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]</b></p>
<p> Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
<p></p>
${msg_main_description}
<p></p>
<p> Project: ${DEFAULT_APPLICATION} </p>
<p> Date of build: ${build_date} </p>
<p> RepoName: ${env.BUILD_aRepoName}</p>
<p> RepoPath: ${env.BUILD_aRepoPath}</p>
<p> RepoType: ${env.BUILD_aRepoType}</p>
<p> Branch Name: ${env.BUILD_aBranch}</p>
<p> Commit Build: ${env.BUILD_aNum} </p>
<p> Commit_ID: ${env.BUILD_aCommit} </p>
<p> Commit E-Mail: ${env.BUILD_aEMail}</p>
<p></p>
<p><b> ARTIFACTS </b></p>
<p>   Images:</p>
<p>          Latest: ${artifact_latest}</p>
<p>         Version: ${artifact_build}</p>
<p>          Commit: ${artifact_commit}</p>
"""


    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if ((buildStatus == 'SUCCESSFUL') || (buildStatus == 'PUBLISHED')) {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)

    if (buildStatus == 'PUBLISHED') {
        // Send EMail All Success
        emailext (
                subject: subject,
                body: details,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to : "${mailList}"
        )
    } else {
        // Send EMail with non-Success Status
        emailext (
                subject: subject,
                body: details,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to : "kbucha@datamola.com"
        )
    }
}
